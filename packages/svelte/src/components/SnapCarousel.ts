/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from '@snap-carousel/core';


interface SnapCarouselProps {
  
  /**  */
  attached?: Components.SnapCarousel["attached"]
}

interface SnapCarouselEvents {
  
}

interface SnapCarouselSlots {
  default: any
}
  
/* generated by Svelte v3.23.2 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	init,
	insert,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot
} from "svelte/internal";

import { createEventDispatcher, onMount } from "svelte";

function create_fragment(ctx) {
	let snap_carousel;
	let current;
	const default_slot_template = /*$$slots*/ ctx[4].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[3], null);

	return {
		c() {
			snap_carousel = element("snap-carousel");
			if (default_slot) default_slot.c();
			set_custom_element_data(snap_carousel, "attached", /*attached*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, snap_carousel, anchor);

			if (default_slot) {
				default_slot.m(snap_carousel, null);
			}

			/*snap_carousel_binding*/ ctx[5](snap_carousel);
			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 8) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[3], dirty, null, null);
				}
			}

			if (!current || dirty & /*attached*/ 1) {
				set_custom_element_data(snap_carousel, "attached", /*attached*/ ctx[0]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(snap_carousel);
			if (default_slot) default_slot.d(detaching);
			/*snap_carousel_binding*/ ctx[5](null);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { attached = undefined } = $$props;
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(1, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	let { $$slots = {}, $$scope } = $$props;

	function snap_carousel_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			__ref = $$value;
			$$invalidate(1, __ref);
		});
	}

	$$self.$set = $$props => {
		if ("attached" in $$props) $$invalidate(0, attached = $$props.attached);
		if ("$$scope" in $$props) $$invalidate(3, $$scope = $$props.$$scope);
	};

	return [attached, __ref, getWebComponent, $$scope, $$slots, snap_carousel_binding];
}

class SnapCarousel extends SvelteComponent {
  $$prop_def: SnapCarouselProps;
  $$events_def: SnapCarouselEvents;
  $$slot_def: SnapCarouselSlots;

  $on<K extends keyof SnapCarouselEvents>(type: K, callback: (e: SnapCarouselEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<SnapCarouselProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { attached: 0, getWebComponent: 2 });
	}

	get getWebComponent(): HTMLSnapCarouselElement | undefined {
		return this.$$.ctx[2];
	}
}

export default SnapCarousel;